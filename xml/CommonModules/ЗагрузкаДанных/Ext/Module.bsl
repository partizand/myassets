Процедура ЗагрузитьБумагиИКотировкиСММВБ(ЗагружатьОФЗ, ЗагружатьКорпОблигации, ЗагружатьАкции) Экспорт
	
	АдресОФЗ = "https://iss.moex.com/iss/engines/stock/markets/bonds/boardgroups/58/securities.csv"; // Облигации Т+1
	АдресКорпОблиг = "https://iss.moex.com/iss/engines/stock/markets/bonds/boardgroups/7/securities.csv"; // Облигации Т0
	АдресАкции = "https://iss.moex.com/iss/engines/stock/markets/shares/boardgroups/57/securities.csv"; // Акции
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("csv");
	
	Если ЗагружатьОФЗ Тогда
		ЗагрузитьФайлВеб(АдресОФЗ, ВременныйФайл);
		ЗагрузитьЦБ(ВременныйФайл);
	КонецЕсли;
	
	Если ЗагружатьКорпОблигации Тогда
		ЗагрузитьФайлВеб(АдресКорпОблиг, ВременныйФайл);
		ЗагрузитьЦБ(ВременныйФайл);
	КонецЕсли;
	
	Если ЗагружатьАкции Тогда
		ЗагрузитьФайлВеб(АдресАкции, ВременныйФайл);
		ЗагрузитьЦБ(ВременныйФайл);
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьЦБ(ИмяФайла, ОбновлятьДанныеБумаг=Ложь, ТабличнаяЧасть=Неопределено, НеЗаполнятьДанные=Ложь) Экспорт
	
	// НеЗаполнятьДанные - данные в базу не пишутся, заполняется только табличная часть, для отладки
	
	Если ТабличнаяЧасть=Неопределено Тогда
		ФормироватьТЧ = Ложь;	
	Иначе
		ФормироватьТЧ=Истина;
	КонецЕсли; 
	
	Разделитель = ";";
	
	СписокКолонок = Новый Массив;
	
	СодержимоеФайла = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.ANSI);
	
	// НКД нет во второй части, но ее нужно заполнять из первой, приходится запоминать для каждой бумаги
	ТаблицаБумаг = Новый ТаблицаЗначений; // Для запоминания НКД
	ТаблицаБумаг.Колонки.Добавить("ЦБ", Новый ОписаниеТипов("СправочникСсылка.ЦенныеБумаги"));
	ТаблицаБумаг.Колонки.Добавить("НКД", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 2)));
	
	СписокДат = Новый Соответствие; // Список всех дат (уникальных) в файле, используется для расчета доходности облигаций по этому списку дат

	//ДатаКотировки = Неопределено;
	НоваяБумага = Ложь;
	Секция = "";  // Текущая обрабатываемая секция securities или marketdata
	Marketdata = "marketdata";  // Виды секций файла
	Securities = "securities";
	СчитатьДоходностьОблигаций = Ложь; // Если попадется облигация сбросится в истину и в конце посчитаются доходности облигаций по датам из СпискаДат
	
	Пока Истина Цикл
		
		СтрокаФайла = СодержимоеФайла.ПрочитатьСтроку(); 

		Если СтрокаФайла=Неопределено Тогда
			Прервать;	
		КонецЕсли; 
		
		Если ПустаяСтрока(СтрокаФайла) Тогда // игнорируемые строки
			Продолжить;	
		КонецЕсли; 
		
		Если СтрокаФайла=Marketdata Тогда // Новая секция Marketdata
			Секция = Marketdata;
			ЗагрузкаБумаг = Ложь;
			Продолжить;	
		КонецЕсли; 
		
		Если СтрокаФайла=Securities Тогда // Новая секция Securities
			Секция = Securities;
			Продолжить;	
		КонецЕсли; 
		
		Если СтрНачинаетсяС(СтрокаФайла, "SECID") Тогда // это названия колонок
			СписокКолонок = СтрРазделить(СтрокаФайла, Разделитель);
			Продолжить;	
		КонецЕсли;
		
		СписокЗначений = СтрРазделить(СтрокаФайла, Разделитель);
		
		// Код и ссылка
		
		Код = ПолучитьЗначение("SECID", СписокЗначений, СписокКолонок);
		БумагаСсылка = Справочники.ЦенныеБумаги.НайтиПоКоду(Код);
			
		Если Секция = Securities Тогда 		// Читаем данные бумаги  1-й раздел
			
			
			Если ПолучитьЗначение("STATUS", СписокЗначений, СписокКолонок)="N" Тогда // бумага неактивна
				Продолжить;	
			КонецЕсли;
			
			Если ПолучитьЗначение("CURRENCYID", СписокЗначений, СписокКолонок)<>"SUR" Тогда // валюта расчетов не рубли
				Продолжить;	
			КонецЕсли;

			Если ПолучитьЗначение("PREVDATE", СписокЗначений, СписокКолонок,Тип("Дата"))=Дата(1,1,1) Тогда // Нет даты котировки
				Продолжить;	
			КонецЕсли;
			
			Если ПолучитьЗначение("PREVLEGALCLOSEPRICE", СписокЗначений, СписокКолонок,Тип("Число"))=0 Тогда // Нет котировки
				Продолжить;	
			КонецЕсли;
			

			// Ищем бумагу в справочнике
			
			Если НЕ БумагаСсылка.Пустая() Тогда // Такая бумага уже есть
				
				Бумага = БумагаСсылка.ПолучитьОбъект();  
				НоваяБумага = Ложь;
				
			Иначе
				
				Бумага = Справочники.ЦенныеБумаги.СоздатьЭлемент();
				Бумага.Код = Код;
				Бумага.Наименование = ПолучитьЗначение("SHORTNAME", СписокЗначений, СписокКолонок);
				Бумага.ПолноеНаименование = ПолучитьЗначение("SECNAME", СписокЗначений, СписокКолонок);
				НоваяБумага = Истина;
				
			КонецЕсли;
			
			
			
			// Определяем Тип и Вид из файла
			
			Если НЕ ЗаплолнитьТипЦБ(СписокЗначений, СписокКолонок, Бумага) Тогда // Заполняем Вид и Тип, ТипКупона и Амортизацию, возвращает ложь если тип не нужен
				Продолжить;	
			КонецЕсли;
			
			// Облигация и объем в обращении = 0, то такое не нужно
			Если Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация И ПолучитьЗначение("ISSUESIZEPLACED", СписокЗначений, СписокКолонок,Тип("Число"))=0 Тогда
				Продолжить;	
			КонецЕсли;
			
			// Если облигация, то валюта номинала нужна толбко рубли
			Если Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация И ПолучитьЗначение("FACEUNIT", СписокЗначений, СписокКолонок)<>"SUR" Тогда
				Продолжить;	
			КонецЕсли; 
			
			// Заполняем табличную часть
			Если ФормироватьТЧ Тогда
				ДобавитьСтрокуТЧ(ТабличнаяЧасть, СписокЗначений, СписокКолонок);	
			КонецЕсли;
			
			Если НеЗаполнятьДанные Тогда  // Не заполняем данные, для отладки
				Продолжить;	
			КонецЕсли; 
			
			ЗаполнитьТипКупона(СписокЗначений, СписокКолонок, Бумага);
			
			
			// Общие поля
			Бумага.РазмерЛота = ПолучитьЗначение("LOTSIZE", СписокЗначений, СписокКолонок, Тип("Число"));
			Бумага.ОбъемВыпуска = ПолучитьЗначение("ISSUESIZE", СписокЗначений, СписокКолонок, Тип("Число"));
			Бумага.Точность = ПолучитьЗначение("DECIMALS", СписокЗначений, СписокКолонок, Тип("Число"));
			Бумага.ШагЦены = ПолучитьЗначение("MINSTEP", СписокЗначений, СписокКолонок, Тип("Число"));
			Бумага.ISIN = ПолучитьЗначение("ISIN", СписокЗначений, СписокКолонок);
			// Поля облигации  (у акции будут пустыми)
			Бумага.ДатаПогашения = ПолучитьЗначение("MATDATE", СписокЗначений, СписокКолонок, Тип("Дата"));
			Бумага.ПериодКупона = ПолучитьЗначение("COUPONPERIOD", СписокЗначений, СписокКолонок, Тип("Число"));
			Бумага.ОбъемВОбращении = ПолучитьЗначение("ISSUESIZEPLACED", СписокЗначений, СписокКолонок, Тип("Число"));
			
			// эмитент
			Если Бумага.Эмитент.Пустая() И (НоваяБумага ИЛИ ОбновлятьДанныеБумаг) Тогда
				Бумага.Эмитент = ПолучитьЭмитента(Бумага.ПолноеНаименование);
			КонецЕсли; 
			
			// Записываем в базу, что бы получить ссылку и обновить связанные регистры
			Если НоваяБумага ИЛИ ОбновлятьДанныеБумаг Тогда 
				Бумага.Записать();
				БумагаСсылка = Бумага.Ссылка;
			КонецЕсли; 
			
			// Котировки
			ДатаКотировки = ПолучитьЗначение("PREVDATE", СписокЗначений, СписокКолонок, Тип("Дата"));
			ДатаКотировки = КонецДня(ДатаКотировки); // Окончательная цена
			СписокДат.Вставить(ДатаКотировки);
			ЦенаЗакрытия = ПолучитьЗначение("PREVLEGALCLOSEPRICE", СписокЗначений, СписокКолонок, Тип("Число")); // Официальная цена закрытия предыдущего дня
	        ЦенаСредневзвеш = ПолучитьЗначение("PREVWAPRICE", СписокЗначений, СписокКолонок, Тип("Число"));
			НКД = ПолучитьЗначение("ACCRUEDINT", СписокЗначений, СписокКолонок, Тип("Число"));
			
			Если ЦенаЗакрытия<>0 Тогда
				РаботаСРегистрами.СоздатьКотировку(Бумага.Ссылка, ДатаКотировки, ЦенаЗакрытия, ЦенаЗакрытия, ЦенаСредневзвеш, НКД);
			КонецЕсли; 
			
			
			// Облигация
			Если Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация Тогда
				
				СчитатьДоходностьОблигаций = Истина;
				
				// Запоминаем НКД для Marketdata
				НовСтрока = ТаблицаБумаг.Добавить();
				НовСтрока.ЦБ = Бумага.Ссылка;
				НовСтрока.НКД = НКД;
				
				
				// Номиналы облигаций
				Номинал = ПолучитьЗначение("FACEVALUE", СписокЗначений, СписокКолонок, Тип("Число"));
				РаботаСРегистрами.СоздатьНоминалОблигации(Бумага.Ссылка,ДатаКотировки, Номинал);
				
				ДатаОферты = ПолучитьЗначение("OFFERDATE", СписокЗначений, СписокКолонок, Тип("Дата")); // Дата когда заплатят деньги по оферте, смещение неск дней
				ЦенаОферты = ПолучитьЗначение("BUYBACKPRICE", СписокЗначений, СписокКолонок, Тип("Число"));
				
				// Купоны облигаций
				ДатаБлижКупона = ПолучитьЗначение("NEXTCOUPON", СписокЗначений, СписокКолонок, Тип("Дата"));
				РазмерКупона = ПолучитьЗначение("COUPONVALUE", СписокЗначений, СписокКолонок, Тип("Число"));
				ЗаполнитьКупоны(Бумага, ДатаБлижКупона, РазмерКупона, ДатаОферты);
				// Добавить ближайший купон (добавляется функцией ЗаполнитьКупоны)
				//РаботаСРегистрами.СоздатьКупон(Бумага.Ссылка, ДатаБлижКупона, РазмерКупона);
				
				// Оферты облигаций
				Если ДатаОферты<>Дата(1,1,1) И ЦенаОферты<>0 Тогда
					РаботаСРегистрами.СоздатьОферту(Бумага.Ссылка,ДатаОферты,,ЦенаОферты); 
				КонецЕсли; 
			КонецЕсли;
			
			
		КонецЕсли;	
		
		Если Секция = Marketdata Тогда 	// Читаем Текущую цену
		
			Если БумагаСсылка.Пустая() Тогда    // В справочнике нет бумаги
				Продолжить;	
			КонецЕсли;
			
			// Заполняем табличную часть
			Если ФормироватьТЧ Тогда
				ОбновитьСтрокуТЧ(ТабличнаяЧасть, СписокЗначений, СписокКолонок);	
			КонецЕсли; 
			
			Если НеЗаполнятьДанные Тогда  // Не заполняем данные, для отладки
				Продолжить;	
			КонецЕсли;
			
			ЦенаПоследняя = ПолучитьЗначение("LAST", СписокЗначений, СписокКолонок, Тип("Число"));
			ДатаКотировки = ПолучитьЗначение("SYSTIME", СписокЗначений, СписокКолонок, Тип("Дата"));
			Если ЦенаПоследняя<>0 Тогда
				СписокДат.Вставить(КонецДня(ДатаКотировки));
				// Извлекаем НКД
				НКД = 0;
				СтрокаТаблицы = ТаблицаБумаг.Найти(БумагаСсылка, "ЦБ");
				Если СтрокаТаблицы<>Неопределено Тогда
					НКД = СтрокаТаблицы.НКД;	
				КонецЕсли; 
				РаботаСРегистрами.СоздатьКотировку(БумагаСсылка,ДатаКотировки,ЦенаПоследняя,,,НКД); // с НКД	
			КонецЕсли; 
		
		КонецЕсли; 
		
	
	КонецЦикла; 
	
	// Посчитать доходность?
	
	Если СчитатьДоходностьОблигаций И НЕ НеЗаполнятьДанные Тогда
		Для каждого Элемент Из СписокДат Цикл
		
			Рассчет.РасчитатьДоходностьОблигаций(Элемент.Ключ);
		
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры


Функция ПолучитьЗначение(ИмяКолонки, СписокЗначений, СписокКолонок, ТипЗначения=Неопределено)

	Если ТипЗначения=Неопределено Тогда
		ТипЗначения=Тип("Строка");	
	КонецЕсли;
	
	Индекс=СписокКолонок.Найти(ИмяКолонки);
	Значение = "";
	
	Если Индекс<>Неопределено Тогда // Колонка есть
		Значение = СписокЗначений[Индекс];
	КонецЕсли;
	
	// Преобразовать значение к типу
	
	Если ТипЗначения = Тип("Число") Тогда
		Если ПустаяСтрока(Значение) Тогда
			Значение = 0;
		Иначе
			Значение = Число(Значение);
		КонецЕсли; 
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если ПустаяСтрока(Значение) Тогда
			Значение = Дата("00010101");
		Иначе
			Значение = ОбщегоНазначения.СтрокаВДату(Значение);
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат Значение;
	
КонецФункции // ПолучитьЗначение()
 
Функция ЗаплолнитьТипЦБ(СписокЗначений, СписокКолонок, Бумага)

		// С сайта  SECTYPE
	
//1 	ао 	Акция обыкновенная
//2 	ап 	Акция привилегированная
//3 	об 	Государственные облигации
//4 	об 	Региональные облигации
//5 	об 	Облигации центральных банков
//6 	об 	Корпоративные облигации
//7 	об 	Облигации МФО
//8 	об 	Биржевые облигации
//9 	ип 	Паи открытых ПИФов
//A 	ип 	Паи интервальных ПИФов
//B 	ип 	Паи закрытых ПИФов
//C 	об 	Муниципальные облигации
//D 	др 	Депозитарные расписки
//E 	иф 	Бумаги иностранных инвестиционных фондов (ETF)
//F 	ис 	Ипотечный сертификат
//G 	кб 	Корзина бумаг
//H 	ди 	Доп. идентификатор списка
//I 	об 	ETC (товарные инструменты)
//U 	ксу 	Клиринговые сертификаты участия

	ТипБумаги = ПолучитьЗначение("SECTYPE", СписокЗначений, СписокКолонок);
	
	Загружать = Ложь;
	
	Если ТипБумаги="1" ИЛИ ТипБумаги="D" Тогда
		
		Бумага.ВидЦБ = Перечисления.ВидыЦБ.Акция;
		Бумага.ТипЦБ = Перечисления.ТипыАкций.Обыкновенная;
		Загружать = Истина;
		
	ИначеЕсли ТипБумаги="2" Тогда
		Бумага.ВидЦБ = Перечисления.ВидыЦБ.Акция;
		Бумага.ТипЦБ = Перечисления.ТипыАкций.Привелегированная;
		Загружать = Истина;
		
	ИначеЕсли ТипБумаги="3" ИЛИ ТипБумаги="5" Тогда // Государственная
		
		Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация;
		Бумага.ТипЦБ = Перечисления.ТипыОблигаций.ОФЗ;
		Загружать = Истина;
		
		
	ИначеЕсли ТипБумаги="4" ИЛИ ТипБумаги="C" Тогда  // Муниципальная
	
		Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация;
		Бумага.ТипЦБ = Перечисления.ТипыОблигаций.Муниципальная;
		Загружать = Истина;
		
	ИначеЕсли ТипБумаги="6" ИЛИ ТипБумаги="8" Тогда   //Корпоративная
	
		Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация;
		Бумага.ТипЦБ = Перечисления.ТипыОблигаций.Корпоративная;
		Загружать = Истина;
	
	КонецЕсли;
	
	
	
	Возврат Загружать;

КонецФункции // ТипЦБизСтруктурыФайла()

Процедура ЗаполнитьТипКупона(СписокЗначений, СписокКолонок, Бумага)
	
	Если Бумага.ВидЦБ <> Перечисления.ВидыЦБ.Облигация Тогда
		Возврат;	
	КонецЕсли; 
	// 
		// Определяем купон и амортизацию
	ГруппаБумаги = ПолучитьЗначение("INSTRID", СписокЗначений, СписокКолонок);
	Если ГруппаБумаги="GOFZ" Тогда // ОФЗ
		
		//Бумага.Эмитент = Справочники.Эмитенты.МинфинРФ;
		// Тип купона
		
		Если СтрНачинаетсяС(Бумага.ПолноеНаименование, "ОФЗ-ПД") Тогда
			Бумага.ТипКупона = Перечисления.ТипыКупонов.Постоянный;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Бумага.ПолноеНаименование, "ОФЗ-ПК") Тогда
			Бумага.ТипКупона = Перечисления.ТипыКупонов.Плавающий;	
		КонецЕсли;
		
		Если СтрНачинаетсяС(Бумага.ПолноеНаименование, "ОФЗ-АД") Тогда
			Бумага.ТипКупона = Перечисления.ТипыКупонов.Постоянный;
			Бумага.Амортизация = Истина;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Бумага.ПолноеНаименование, "ОФЗ-ИН") Тогда
			Бумага.ТипКупона = Перечисления.ТипыКупонов.ПеременныйНоминал;	
		КонецЕсли;
		
			
	Иначе   // Все кроме офз
		
		// Если нет даты купона, то дисконтная облигация
		ДатаКупона = ПолучитьЗначение("NEXTCOUPON", СписокЗначений, СписокКолонок, Тип("Дата"));
		Если ДатаКупона=Дата(1,1,1) Тогда
		
			Бумага.ТипКупона = Перечисления.ТипыКупонов.Бескупонный;
			Возврат; // Некрасиво
		
		КонецЕсли; 
		// Есть оферта - переменный, иначе хз
		ДатаОферты = ПолучитьЗначение("OFFERDATE", СписокЗначений, СписокКолонок, Тип("Дата")); // Дата когда заплатят деньги по оферте, смещение неск дней		
		ЦенаОферты = ПолучитьЗначение("BUYBACKPRICE", СписокЗначений, СписокКолонок, Тип("Число"));
		Если ДатаОферты<>Дата(1,1,1) И ЦенаОферты<>0 Тогда
			Бумага.ТипКупона = Перечисления.ТипыКупонов.Переменный;
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры
 

Функция ПолучитьЭмитента(БумагаПолноеНаименование)
	
	ЭмитентНаименование = БумагаПолноеНаименование;

	// ОФЗ - МинФин
	Если СтрНачинаетсяС(ЭмитентНаименование, "ОФЗ") Тогда
		Возврат Справочники.Эмитенты.МинфинРФ;	
	КонецЕсли;
	
	// Эмитент
	Если СтрЗаканчиваетсяНа(ЭмитентНаименование, "ао") ИЛИ СтрЗаканчиваетсяНа(ЭмитентНаименование, "ап") Тогда
	
		ЭмитентНаименование = Лев(ЭмитентНаименование, СтрДлина(ЭмитентНаименование)-2);		
	    ЭмитентНаименование = СокрП(ЭмитентНаименование);
	КонецЕсли; 
	
	Если СтрНачинаетсяС(ЭмитентНаименование, "ао") ИЛИ СтрНачинаетсяС(ЭмитентНаименование, "ап") Тогда
	
		ЭмитентНаименование = Прав(ЭмитентНаименование, СтрДлина(ЭмитентНаименование)-2);		
	    ЭмитентНаименование = СокрЛ(ЭмитентНаименование);
	КонецЕсли;
	
	ЭмитентСсылка = Справочники.Эмитенты.НайтиПоНаименованию(ЭмитентНаименование);
	
	Если ЭмитентСсылка.Пустая() Тогда
	
		Эмитент = Справочники.Эмитенты.СоздатьЭлемент();
		Эмитент.Наименование = ЭмитентНаименование;
		Эмитент.Записать();
		ЭмитентСсылка = Эмитент.Ссылка;
	КонецЕсли;
	
	Возврат ЭмитентСсылка;

КонецФункции // ПолучитьЭмитента()
 
Процедура ДобавитьСтрокуТЧ(ТЧ, СписокЗначений, СписокКолонок)

	НовСтрока = ТЧ.Добавить();
	
	НовСтрока.Код = ПолучитьЗначение("SECID", СписокЗначений, СписокКолонок);
	НовСтрока.Наименование = ПолучитьЗначение("SHORTNAME", СписокЗначений, СписокКолонок);;
	НовСтрока.Цена = ПолучитьЗначение("PREVLEGALCLOSEPRICE", СписокЗначений, СписокКолонок, Тип("Число"));
	НовСтрока.ДатаПрошлая = ПолучитьЗначение("PREVDATE", СписокЗначений, СписокКолонок, Тип("Дата"));
	НовСтрока.НКД = ПолучитьЗначение("ACCRUEDINT", СписокЗначений, СписокКолонок);
	НовСтрока.ЦенаОферты = ПолучитьЗначение("BUYBACKPRICE", СписокЗначений, СписокКолонок, Тип("Число"));
	НовСтрока.ДатаДоходности = ПолучитьЗначение("BUYBACKDATE", СписокЗначений, СписокКолонок, Тип("Дата")); // Дата оферты
	НовСтрока.ДатаОферты = ПолучитьЗначение("OFFERDATE", СписокЗначений, СписокКолонок, Тип("Дата")); // Дата когда заплатят деньги по оферте, смещение неск дней
	НовСтрока.ДатаПогашения = ПолучитьЗначение("MATDATE", СписокЗначений, СписокКолонок, Тип("Дата"));
	НовСтрока.ДатаКупона = ПолучитьЗначение("NEXTCOUPON", СписокЗначений, СписокКолонок, Тип("Дата"));
	НовСтрока.ВалютаНоминала = ПолучитьЗначение("FACEUNIT", СписокЗначений, СписокКолонок);
	НовСтрока.ВалютаИнструмента = ПолучитьЗначение("CURRENCYID", СписокЗначений, СписокКолонок);
	
	ЗаписьРС = РегистрыСведений.ЗагрузкаБумаг.СоздатьМенеджерЗаписи();
	ЗаписьРС.Код = ПолучитьЗначение("SECID", СписокЗначений, СписокКолонок);
	ЗаписьРС.Наименование = ПолучитьЗначение("SHORTNAME", СписокЗначений, СписокКолонок);;
	ЗаписьРС.Цена = ПолучитьЗначение("PREVLEGALCLOSEPRICE", СписокЗначений, СписокКолонок, Тип("Число"));
	ЗаписьРС.ДатаПрошлая = ПолучитьЗначение("PREVDATE", СписокЗначений, СписокКолонок, Тип("Дата"));
	ЗаписьРС.НКД = ПолучитьЗначение("ACCRUEDINT", СписокЗначений, СписокКолонок);
	ЗаписьРС.ЦенаОферты = ПолучитьЗначение("BUYBACKPRICE", СписокЗначений, СписокКолонок, Тип("Число"));
	ЗаписьРС.ДатаДоходности = ПолучитьЗначение("BUYBACKDATE", СписокЗначений, СписокКолонок, Тип("Дата")); // Дата оферты
	ЗаписьРС.ДатаОферты = ПолучитьЗначение("OFFERDATE", СписокЗначений, СписокКолонок, Тип("Дата")); // Дата когда заплатят деньги по оферте, смещение неск дней
	ЗаписьРС.ДатаПогашения = ПолучитьЗначение("MATDATE", СписокЗначений, СписокКолонок, Тип("Дата"));
	ЗаписьРС.ДатаКупона = ПолучитьЗначение("NEXTCOUPON", СписокЗначений, СписокКолонок, Тип("Дата"));
	ЗаписьРС.ВалютаНоминала = ПолучитьЗначение("FACEUNIT", СписокЗначений, СписокКолонок);
	ЗаписьРС.ВалютаИнструмента = ПолучитьЗначение("CURRENCYID", СписокЗначений, СписокКолонок);
	ЗаписьРС.РазмерКупона = ПолучитьЗначение("COUPONVALUE", СписокЗначений, СписокКолонок, Тип("Число"));

	ЗаписьРС.Записать();

КонецПроцедуры
 
Процедура ОбновитьСтрокуТЧ(ТЧ, СписокЗначений, СписокКолонок)
	
	Код = ПолучитьЗначение("SECID", СписокЗначений, СписокКолонок);
	Отбор = Новый Структура("Код", Код);
	СписокСтрок = ТЧ.НайтиСтроки(Отбор);
	
	Если СписокСтрок.Количество() < 1 Тогда
	    Возврат;
	КонецЕсли; 
	
	ТекСтрока = СписокСтрок[0];
	
	ТекСтрока.ЦенаТекущая = ПолучитьЗначение("LAST", СписокЗначений, СписокКолонок, Тип("Число"));
	ТекСтрока.ДатаТекущая = ПолучитьЗначение("SYSTIME", СписокЗначений, СписокКолонок, Тип("Дата"));

	ЗаписьРС = РегистрыСведений.ЗагрузкаБумаг.СоздатьМенеджерЗаписи();
	ЗаписьРС.Код = Код;
	ЗаписьРС.Прочитать();
	
	Если НЕ ПустаяСтрока(ЗаписьРС.Код) Тогда
	
		ЗаписьРС.ЦенаТекущая = ПолучитьЗначение("LAST", СписокЗначений, СписокКолонок, Тип("Число"));
		ЗаписьРС.ДатаТекущая = ПолучитьЗначение("SYSTIME", СписокЗначений, СписокКолонок, Тип("Дата"));
	    ЗаписьРС.Записать();
	КонецЕсли; 

	

КонецПроцедуры


Процедура ЗаполнитьКупоны(ЦБОбъект, ДатаБлижКупона, РазмерБлижКупона, ДатаОферты)
	
	// Если есть период купона, то заполняем даты купона по алгоритму
	// Для постоянного купона заполняем размер купона до даты погашения
	// Для переменного купона заполняем размер купона до даты оферты
	// Для плавающего - размер только ближайшего купона

	// Если ближайший купон есть, то считаем, что уже заполняли
	
	// Оферту можно получить запросом, но это замедлит выполнение
	
	// Тест! Убрать!
	//ЦБОбъект =  Справочники.ЦенныеБумаги.СоздатьЭлемент();
	
	ЦБСсылка = ЦБОбъект.Ссылка; 
	
	Если ЦБОбъект.ВидЦБ <> Перечисления.ВидыЦБ.Облигация Тогда  // Купоны только у облигаций
		Возврат;	
	КонецЕсли;
	
	Если ЦБОбъект.ПериодКупона = 0 Тогда  // Нет периода купона (бескупонная?)
		Возврат;	
	КонецЕсли;
	
	//Если ЦБОбъект.ТипКупона <> Перечисления.ТипыКупонов.Постоянный Тогда // Считаем только для постоянных купонов
	//	Возврат;	
	//КонецЕсли;
	
	Отбор = Новый Структура("ЦБ", ЦБСсылка);
	Купон = РегистрыСведений.КупоныОблигаций.Получить(ДатаБлижКупона, Отбор).СуммаКупона;
	
	Если Купон<>0 Тогда // купоны уже заполнены
		Возврат;	
	КонецЕсли;
	
	// Добавляем ближ купон
	РаботаСРегистрами.СоздатьКупон(ЦБСсылка,ДатаБлижКупона, РазмерБлижКупона); 
	
	Если ДатаБлижКупона = ЦБОбъект.ДатаПогашения Тогда  // Купонов больше нет
		Возврат;	
	КонецЕсли; 
	
	// Дальше интересней
	// Нужно даты между погашением и ближайшим купоном разбить на отрезки по периоду купона
	
	// Получаем количество оставшихся купонов = разница дат (в днях) / период купона
	// Отнимаем 1, остальные добавляем, прибавляя период купона
	РазницаВДнях = (ЦБОбъект.ДатаПогашения - ДатаБлижКупона) / (60 * 60 * 24);
	КоличествоКупонов = Окр(РазницаВДнях/ЦБОбъект.ПериодКупона,0);
	
	ТекДатаКупона = ДатаБлижКупона;
	РазмерКупона = РазмерБлижКупона;
	Пока КоличествоКупонов>0 Цикл
	
		ТекДатаКупона = ТекДатаКупона + ЦБОбъект.ПериодКупона*24*60*60;
		
		// Для постоянного купона заполняем размер купона до даты погашения
		// Для переменного купона заполняем размер купона до даты оферты
		// Для остальных - размер только ближайшего купона
	
		Если ЦБОбъект.ТипКупона = Перечисления.ТипыКупонов.Постоянный ИЛИ
			(ЦБОбъект.ТипКупона = Перечисления.ТипыКупонов.Переменный И (ТекДатаКупона<=ДатаОферты)) Тогда
		
			РазмерКупона = РазмерБлижКупона;
	
		Иначе
		
			РазмерКупона=0;		
		
		КонецЕсли; 
		
		Если КоличествоКупонов=1 Тогда // Последний купон это дата погашения
			ТекДатаКупона = ЦБОбъект.ДатаПогашения;	
		КонецЕсли; 
		
		РаботаСРегистрами.СоздатьКупон(ЦБСсылка,ТекДатаКупона, РазмерКупона);
		КоличествоКупонов = КоличествоКупонов -1;
		
		
	
	КонецЦикла;
	
	//РаботаСРегистрами.СоздатьКупон(ЦБСсылка,ЦБОбъект.ДатаПогашения, ЦБОбъект.РазмерКупона); // Купон в дату погашения


КонецПроцедуры

Процедура ЗагрузитьФайлВеб(АдресФайлаВеб, ИмяФайла)
	URI = СтруктураURI(АдресФайлаВеб);
	Если URI.Схема = "https" Тогда
	
		БезопасноеСоединение = Новый HTTPСоединение(URI.ИмяСервера,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		Запрос = Новый HTTPЗапрос(URI.ПутьНаСервере);
		Ответ = БезопасноеСоединение.Получить(Запрос, ИмяФайла);
	КонецЕсли; 

КонецПроцедуры

Функция СтруктураURI(Знач СтрокаURI) 
    СтрокаURI = СокрЛП(СтрокаURI);
    
    Схема = "";
    Позиция = Найти(СтрокаURI, "://");
    Если Позиция > 0 Тогда
        Схема = НРег(Лев(СтрокаURI, Позиция - 1));
        СтрокаURI = Сред(СтрокаURI, Позиция + 3);
    КонецЕсли;
 
    СтрокаСоединения = СтрокаURI;
    ПутьНаСервере = "";
    Позиция = Найти(СтрокаСоединения, "/");
    Если Позиция > 0 Тогда
        ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
        СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
    КонецЕсли;
        
    СтрокаАвторизации = "";
    ИмяСервера = СтрокаСоединения;
    Позиция = Найти(СтрокаСоединения, "@");
    Если Позиция > 0 Тогда
        СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
        ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
    КонецЕсли;
    
    Логин = СтрокаАвторизации;
    Пароль = "";
    Позиция = Найти(СтрокаАвторизации, ":");
    Если Позиция > 0 Тогда
        Логин = Лев(СтрокаАвторизации, Позиция - 1);
        Пароль = Сред(СтрокаАвторизации, Позиция + 1);
    КонецЕсли;
    
    Хост = ИмяСервера;
    Порт = "";
    Позиция = Найти(ИмяСервера, ":");
    Если Позиция > 0 Тогда
        Хост = Лев(ИмяСервера, Позиция - 1);
        Порт = Сред(ИмяСервера, Позиция + 1);
    КонецЕсли;
    
    Результат = Новый Структура;
    Результат.Вставить("Схема", Схема);
    Результат.Вставить("Логин", Логин);
    Результат.Вставить("Пароль", Пароль);
    Результат.Вставить("ИмяСервера", ИмяСервера);
    Результат.Вставить("Хост", Хост);
    Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
    Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
    
    Возврат Результат;
КонецФункции
 