Процедура Тест()

		

КонецПроцедуры
 

//Процедура ЗагрузитьЦБ(ИмяФайла) Экспорт

//	Разделитель = ";";
//	
//	К_Код = "SECID";
//	К_Наименование= "SHORTNAME"; // Короткое наименование
//	К_ПолНаимен="SECNAME";  // Полное наименование
//	К_ТипЦБ="INSTRID"; // Тип ценной бумаги
//	// EQIN - акция и ДР
//	// IFTF - etf
//	// IFA1 - пай
//	// EILD - акция
//	// GOFZ - ОФЗ
//	// BOBR - КОБР облигация
//	// EIUS - Еврооблигация
//	К_Статус="STATUS"; // Статус
//	// A - активна
//	// N - неактивна
//	К_КодТипаБумаги = "SECTYPE"; //Код типа бумаги
//	// 1 - акция обыкновенная
//	// 2 - акция привелегир
//	// D - ГДР
//	// 5 - КОБР облигация
//	// 3 - ОФЗ
//	// 8 - Корп облигация ?
//	// 6 - еврооблигация
//	К_РазмерЛота="LOTSIZE";
//	К_ДатаПогашения = "MATDATE"; // Дата погашения для облигации
//	К_Точность = "DECIMALS"; // Знаков после запятой
//	К_ПериодКупона = "COUPONPERIOD"; // Период купона, дней. Для облигаций
//	К_ПроцентКупона = "COUPONPERCENT"; // Процент купона к номиналу, для облигаций
//	К_Номинал= "FACEVALUE"; // размер лота для облигаций, для частичного погашения неправильный!
//	К_ДатаБлижКупона = "NEXTCOUPON"; // Дата ближайшего купона
//	К_РазмерКупона = "COUPONVALUE";
//	К_ШагЦены = "MINSTEP";
//	К_ОбъемВыпуска = "ISSUESIZE"; // Объем выпуска
//	К_Валюта = "CURRENCYID";
//	// SUR - Рубль
//	// USD - доллар
//	К_ДатаПоследнихТоргов = "PREVDATE"; // Дата последних торгов
//	// Цены
//	К_СредневзвешЦена = "PREVWAPRICE"; // Средневзвешенная цена предыдущего дня, % к номиналу
//	К_НКД = "ACCRUEDINT"; // НКД, в валюте расчетов
//	К_ПоследняяЦена = "PREVPRICE"; // Цена последней сделки пред. дня, % к номиналу
//	К_ЦенаЗакрытия = "PREVLEGALCLOSEPRICE"; // Официальная цена закрытия предыдущего дня
//	К_ПризКотировка = "PREVADMITTEDQUOTE"; // Признаваемая котировка предыдущего дня
//	
//	// marketdata
//	КМ_Дата = "SYSTIME"; //Время загрузки;Время загрузки данных системой
//	КМ_Открытие = "OPEN"; // Цена первой сделки, % к номиналу
//	КМ_Мнинмум = "LOW"; //Минимум, %;Минимальная цена сделки, % к номиналу
//	КМ_Максимум = "HIGH"; //Максимум, %;Максимальная цена сделки, % к номиналу
//	КМ_Последняя = "LAST"; //Цена посл., %;Цена последней сделки, %
//	КМ_СредневзвешЦена = "WAPRICE"; //Срвзв. цена, %;Средневзвешенная цена, % к номиналу
//	
//	СписокКолонок = Новый Массив;
//	
//	СодержимоеФайла = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.ANSI);
//	
//	СтрокаФайла = СодержимоеФайла.ПрочитатьСтроку();
//	
//	ЗагрузкаБумаг = Истина; // Если ложь, загрузка цен
//	
//	ТаблицаБумаг = Новый ТаблицаЗначений; // Для запоминания НКД
//	ТаблицаБумаг.Колонки.Добавить("ЦБ", Новый ОписаниеТипов("СправочникСсылка.ЦенныеБумаги"));
//    ТаблицаБумаг.Колонки.Добавить("НКД", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 2)));
//	
//	Пока СтрокаФайла<>Неопределено Цикл
//		
//		Если СтрокаФайла="marketdata" Тогда // Конец обработки
//			ЗагрузкаБумаг = Ложь;
//			СтрокаФайла = СодержимоеФайла.ПрочитатьСтроку();
//			Продолжить;	
//		КонецЕсли; 
//		
//		Если ПустаяСтрока(СтрокаФайла) ИЛИ СтрокаФайла="securities" Тогда // игнорируемые строки
//			СтрокаФайла = СодержимоеФайла.ПрочитатьСтроку();
//			Продолжить;	
//		КонецЕсли; 
//		
//		Если СтрНачинаетсяС(СтрокаФайла, "SECID") Тогда // это названия колонок
//			СписокКолонок = СтрРазделить(СтрокаФайла, Разделитель);
//		КонецЕсли;
//		
//		СписокЗначений = СтрРазделить(СтрокаФайла, Разделитель);
//		
//		// Код и ссылка
//		
//		Код = СписокЗначений[СписокКолонок.Найти(К_Код)];
//		БумагаСсылка = Справочники.ЦенныеБумаги.НайтиПоКоду(Код);
//			
//		Если ЗагрузкаБумаг Тогда 		// Читаем данные бумаги

//			// Активность
//			Если СписокЗначений[СписокКолонок.Найти(К_Статус)]="N" Тогда // бумага неактивна
//				СтрокаФайла = СодержимоеФайла.ПрочитатьСтроку();
//				Продолжить;	
//			КонецЕсли;
//			
//			// Только рубли
//			Если СписокЗначений[СписокКолонок.Найти(К_Валюта)]<>"SUR" Тогда // Не рубли
//				СтрокаФайла = СодержимоеФайла.ПрочитатьСтроку();
//				Продолжить;	
//			КонецЕсли;
//			
//			
//			Если НЕ БумагаСсылка.Пустая() Тогда // Такая бумага уже есть
//				
//				Бумага = БумагаСсылка.ПолучитьОбъект();  // Пока все обновляем в тестовом режиме
//			Иначе
//				
//				Бумага = Справочники.ЦенныеБумаги.СоздатьЭлемент();
//				Бумага.Код = Код;
//				Бумага.Наименование = СписокЗначений[СписокКолонок.Найти(К_Наименование)];
//				Бумага.ПолноеНаименование = СписокЗначений[СписокКолонок.Найти(К_ПолНаимен)];
//				
//			КонецЕсли;
//			
//			// Тип и Вид
//			
//			Тип = СписокЗначений[СписокКолонок.Найти(К_ТипЦБ)];
//			
//			
//			
//			Если Тип="GOFZ" ИЛИ Тип="BOBR" ИЛИ Тип="EIUS" Тогда // облигация
//			
//				Бумага.ВидЦБ=Перечисления.ВидыЦБ.Облигация;
//				
//				Если Тип="GOFZ" Тогда
//					Бумага.ТипЦБ = Перечисления.ТипыОблигаций.ОФЗ;
//					Бумага.Эмитент = Справочники.Эмитенты.МинфинРФ;
//					
//					// Тип купона
//					
//					Если СтрНачинаетсяС(Бумага.ПолноеНаименование, "ОФЗ-ПД") Тогда
//						Бумага.ТипКупона = Перечисления.ТипыКупонов.Постоянный;
//					КонецЕсли;
//					
//					Если СтрНачинаетсяС(Бумага.ПолноеНаименование, "ОФЗ-ПК") Тогда
//						Бумага.ТипКупона = Перечисления.ТипыКупонов.Переменный;	
//					КонецЕсли;
//					
//					Если СтрНачинаетсяС(Бумага.ПолноеНаименование, "ОФЗ-АД") Тогда
//						Бумага.ТипКупона = Перечисления.ТипыКупонов.Амортизация;	
//					КонецЕсли;
//					
//					Если СтрНачинаетсяС(Бумага.ПолноеНаименование, "ОФЗ-ИН") Тогда
//						Бумага.ТипКупона = Перечисления.ТипыКупонов.ПеременныйНоминал;	
//					КонецЕсли;
//					
//				КонецЕсли;
//				
//				Если Тип="EIUS" Тогда
//					Бумага.ТипЦБ = Перечисления.ТипыОблигаций.Еврооблигация;	
//				КонецЕсли; 
//				
//				Если Тип="BOBR" Тогда
//					Бумага.Эмитент = Справочники.Эмитенты.ЦБРФ;
//					Бумага.ТипЦБ = Перечисления.ТипыОблигаций.ЦБРФ;	
//				КонецЕсли; 
//				
//				
//			ИначеЕсли Тип="EQIN" ИЛИ Тип="EILD" Тогда
//				
//				Бумага.ВидЦБ=Перечисления.ВидыЦБ.Акция;
//				
//				КодТипа = СписокЗначений[СписокКолонок.Найти(К_КодТипаБумаги)];
//				
//				
//				Если КодТипа="1" ИЛИ КодТипа="D" Тогда
//					Бумага.ТипЦБ = Перечисления.ТипыАкций.Обыкновенная;	
//				
//				ИначеЕсли КодТипа="2" Тогда
//					Бумага.ТипЦБ = Перечисления.ТипыАкций.Привелегированная;
//				КонецЕсли; 
//				
//				// Эмитент
//				ЭмитентНаименование = Бумага.ПолноеНаименование;
//				Если СтрЗаканчиваетсяНа(ЭмитентНаименование, "ао") ИЛИ СтрЗаканчиваетсяНа(ЭмитентНаименование, "ап") Тогда
//				
//					ЭмитентНаименование = Лев(ЭмитентНаименование, СтрДлина(ЭмитентНаименование)-2);		
//				    ЭмитентНаименование = СокрП(ЭмитентНаименование);
//				КонецЕсли; 
//				
//				Если СтрНачинаетсяС(ЭмитентНаименование, "ао") ИЛИ СтрНачинаетсяС(ЭмитентНаименование, "ап") Тогда
//				
//					ЭмитентНаименование = Прав(ЭмитентНаименование, СтрДлина(ЭмитентНаименование)-2);		
//				    ЭмитентНаименование = СокрЛ(ЭмитентНаименование);
//				КонецЕсли;
//				
//				ЭмитентСсылка = Справочники.Эмитенты.НайтиПоНаименованию(ЭмитентНаименование);
//				
//				Если ЭмитентСсылка.Пустая() Тогда
//				
//					Эмитент = Справочники.Эмитенты.СоздатьЭлемент();
//					Эмитент.Наименование = ЭмитентНаименование;
//					Эмитент.Записать();
//					ЭмитентСсылка = Эмитент.Ссылка;
//				КонецЕсли;
//				
//				Бумага.Эмитент = ЭмитентСсылка;
//				
//			Иначе // Неизвестный тип
//				СтрокаФайла = СодержимоеФайла.ПрочитатьСтроку();
//				Продолжить; 
//			
//			КонецЕсли;
//			
//			// Размер лота
//			
//			Бумага.РазмерЛота = СписокЗначений[СписокКолонок.Найти(К_РазмерЛота)];
//			
//			
//			
//			Если Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация Тогда
//				
//				// дата погашения облигации
//				//стрДата = СписокЗначений[СписокКолонок.Найти(К_ДатаПогашения)];
//				//стрДата = СтрЗаменить(стрДата,"-","");
//				Бумага.ДатаПогашения = ОбщегоНазначения.СтрокаВДату(СписокЗначений[СписокКолонок.Найти(К_ДатаПогашения)]); // Дата(стрДата);
//				
//				Бумага.РазмерКупона = СписокЗначений[СписокКолонок.Найти(К_РазмерКупона)];
//				Бумага.ПериодКупона = СписокЗначений[СписокКолонок.Найти(К_ПериодКупона)];
//				Бумага.ПроцентКупона = СписокЗначений[СписокКолонок.Найти(К_ПроцентКупона)];
//				Бумага.Номинал = СписокЗначений[СписокКолонок.Найти(К_Номинал)];
//				
//			
//			КонецЕсли;
//			
//			// Точность
//			Бумага.Точность = СписокЗначений[СписокКолонок.Найти(К_Точность)];
//			Бумага.ШагЦены = СписокЗначений[СписокКолонок.Найти(К_ШагЦены)];
//			Бумага.ОбъемВыпуска = СписокЗначений[СписокКолонок.Найти(К_ОбъемВыпуска)];
//			
//			Бумага.Записать();
//			
//			// Заполняем КупоныОблигаций
//			Если Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация Тогда
//				ЗаполнитьКупоны(Бумага, ОбщегоНазначения.СтрокаВДату(СписокЗначений[СписокКолонок.Найти(К_ДатаБлижКупона)]));
//			КонецЕсли;
//			
//			// Заполняем Котировки
//			ДатаКотировки = ОбщегоНазначения.СтрокаВДату(СписокЗначений[СписокКолонок.Найти(К_ДатаПоследнихТоргов)]);
//			ЦенаЗакрытия = СписокЗначений[СписокКолонок.Найти(К_ЦенаЗакрытия)]; // Официальная цена закрытия предыдущего дня
//	        ЦенаСредневзвеш = СписокЗначений[СписокКолонок.Найти(К_СредневзвешЦена)];
//			Если Бумага.ВидЦБ = Перечисления.ВидыЦБ.Облигация Тогда
//				НКД = СписокЗначений[СписокКолонок.Найти(К_НКД)];
//				НовСтрока = ТаблицаБумаг.Добавить();
//				НовСтрока.ЦБ = БумагаСсылка;
//				НовСтрока.НКД = НКД;
//			Иначе
//				НКД=0;
//			КонецЕсли; 
//			
//			Если НЕ ПустаяСтрока(ЦенаЗакрытия) Тогда
//			
//				РаботаСРегистрами.СоздатьКотировку(Бумага.Ссылка, ДатаКотировки, ЦенаЗакрытия, ЦенаЗакрытия, ЦенаСредневзвеш, НКД);
//			
//			КонецЕсли; 
//			
//		
//		Иначе  // Читаем цену
//		
//			Если БумагаСсылка.Пустая() Тогда    // В справочнике нет бумаги
//				СтрокаФайла = СодержимоеФайла.ПрочитатьСтроку();
//				Продолжить;	
//			КонецЕсли;
//			
//			ЦенаПоследняя = СписокЗначений[СписокКолонок.Найти(КМ_Последняя)];
//			ДатаКотировки = ОбщегоНазначения.СтрокаВДату(СписокЗначений[СписокКолонок.Найти(КМ_Дата)]);
//			Если НЕ ПустаяСтрока(ЦенаПоследняя) Тогда
//				//Отбор = Новый Структура("ЦБ", БумагаСсылка); // Запрос в цикле, нужно делать запросом
//				СтрокаТаблицы = ТаблицаБумаг.Найти(БумагаСсылка, "ЦБ");
//				Если СтрокаТаблицы=Неопределено Тогда
//					НКД=0;	
//				Иначе
//					НКД=СтрокаТаблицы.НКД;
//				КонецЕсли; 
//				//НКД = РегистрыСведений.Котировки.ПолучитьПоследнее(ДатаКотировки, Отбор).НКД;
//				РаботаСРегистрами.СоздатьКотировку(БумагаСсылка,ДатаКотировки,ЦенаПоследняя,,,НКД);	
//			
//			КонецЕсли; 
//		
//		КонецЕсли; 
//		
//		СтрокаФайла=СодержимоеФайла.ПрочитатьСтроку();
//	
//	КонецЦикла; 
//	

//КонецПроцедуры

//Процедура ЗаполнитьКупоны(ЦБОбъект, ДатаБлижКупона)
//	
//	// Тест! Убрать!
//	//ЦБОбъект =  Справочники.ЦенныеБумаги.СоздатьЭлемент();
//	
//	ЦБСсылка = ЦБОбъект.Ссылка; //ПолучитьСсылку();
//	
//	Если ЦБОбъект.ВидЦБ <> Перечисления.ВидыЦБ.Облигация Тогда  // Купоны только у облигаций
//		Возврат;	
//	КонецЕсли;
//	
//	Если ЦБОбъект.ТипКупона <> Перечисления.ТипыКупонов.Постоянный Тогда // Считаем только для постоянных купонов
//		Возврат;	
//	КонецЕсли;
//	
//	Отбор = Новый Структура("ЦБ", ЦБСсылка);
//	Купон = РегистрыСведений.КупоныОблигаций.Получить(ДатаБлижКупона, Отбор).Купон;
//	
//	Если Купон<>0 Тогда // купоны уже заполнены
//		Возврат;	
//	КонецЕсли;
//	
//	// Добавляем ближ купон
//	РаботаСРегистрами.СоздатьКупон(ЦБСсылка,ДатаБлижКупона, ЦБОбъект.РазмерКупона); 
//	
//	Если ДатаБлижКупона = ЦБОбъект.ДатаПогашения Тогда  // Купонов больше нет
//		Возврат;	
//	КонецЕсли; 
//	
//	// Дальше интересней
//	// Нужно даты между погашением и ближайшим купоном разбить на отрезки по периоду купона
//	
//	// Получаем количество оставшихся купонов = разница дат (в днях) / период купона
//	// Отнимаем 1, остальные добавляем, прибавляя период купона
//	РазницаВДнях = (ЦБОбъект.ДатаПогашения - ДатаБлижКупона) / (60 * 60 * 24);
//	КоличествоКупонов = Окр(РазницаВДнях/ЦБОбъект.ПериодКупона,0)-1;
//	
//	ТекДатаКупона = ДатаБлижКупона;
//	
//	Пока КоличествоКупонов>0 Цикл
//	
//		ТекДатаКупона = ТекДатаКупона + ЦБОбъект.ПериодКупона*24*60*60;
//		РаботаСРегистрами.СоздатьКупон(ЦБСсылка,ТекДатаКупона, ЦБОбъект.РазмерКупона);
//		КоличествоКупонов = КоличествоКупонов -1;
//	
//	КонецЦикла;
//	
//	РаботаСРегистрами.СоздатьКупон(ЦБСсылка,ЦБОбъект.ДатаПогашения, ЦБОбъект.РазмерКупона);


//КонецПроцедуры


 
 